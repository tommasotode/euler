pub fn main() {

  let num = "731671765313306249192251196744265747423553491949349698352031277450632623\
  95783180169848018694788518438586156078911294949545950173795833195285320880551112540698747\
  15852386305071569329096329522744304355766896648950445244523161731856403098711121722383113\
  62229893423380308135336276614282806444486645238749303589072962904915604407723907138105158\
  59307960866701724271218839987979087922749219016997208880937766572733300105336788122023542\
  18097512545405947522435258490771167055601360483958644670632441572215539753697817977846174\
  06495514929086256932197846862248283972241375657056057490261407972968652414535100474821663\
  70484403199890008895243450658541227588666881164271714799244429282308634656748139191231628\
  24586178664583591245665294765456828489128831426076900422421902267105562632111110937054421\
  75069416589604080719840385096245544436298123098787992724428490918884580156166097919133875\
  49920052406368991256071760605886116467109405077541002256983155200055935729725716362695618\
  82670428252483600823257530420752963450";

  let group_size = 13;

  let digits : Vec<u64> = num.chars().map(|c| c.to_digit(10).unwrap() as u64).collect();
  let mut prod : u64 = digits.iter().take(group_size).product();
  let mut max = prod;

  let mut i = 0;
  while i + group_size < 1000 {

    prod = digits.iter().skip(i).take(group_size).product();
    max = std::cmp::max(max, prod);

    i += 1
  }

  println!("{}", max);
}